@page "/character/{characterID}"
@rendermode InteractiveServer
@inject DataAccess DataAccess
@inject NavigationManager Navigation

<PageTitle>@characterID</PageTitle>
<head>
	<link rel="stylesheet" href="@Assets["characterMenu.css"]" />
</head>

<h1>@characterID</h1>

<div class="abilityScoreTable" style="grid-template-rows: repeat(@Project20.Character.numberOfAbilities, 1fr);">
	@foreach (int i in Enumerable.Range(0, Project20.Character.numberOfAbilities - 1))
	{
		<div class="abilityScore">
			@Project20.Character.abilityNames[i]: @abilityModifiers[i]
			<input @bind-value="abilityScore[i]" @bind-value:after="UpdateAbilityScore">
		</div>
	}
</div>

<button @onclick="SaveCharacter">Save Character</button>

@code {
	//@bind-value:after="() => ChangeAbilityScore(i)"
	[Parameter]
	public string characterID { get; set; }
	private Project20.Character character;

	private string[] abilityScore = new string[Project20.Character.numberOfAbilities];

	/*
	private string[] abilityScore
	{
		get { return character.abilityScore.Select(x => x.ToString()).ToArray(); }
		set { character.abilityScore = value.Select(x => int.TryParse(x, out int parseX) ? parseX : -5).ToArray(); }
		}*/

	private string[] abilityModifiers
	{
		get { return character.abilityScore.Select(x => GetModifier(x)).ToArray(); }
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();

		if(!DataAccess.characters.TryGetValue(characterID, out character))
		{
			Navigation.NavigateTo("/characterNotFound");
		}

		for (int i = 0; i < Project20.Character.numberOfAbilities; ++i)
		{
			abilityScore[i] = character.abilityScore[i].ToString();
			abilityModifiers[i] = GetModifier(character.abilityScore[i]);
		}
	}

	private void UpdateAbilityScore()
	{
		character.abilityScore = abilityScore.Select(x => int.TryParse(x, out int parseX) ? parseX : -5).ToArray();
	}

	/*
	private void ChangeAbilityScore(int index)
	{
		abilityModifiers[index] = GetModifier(abilityScore[index]);
		}
	*/

	private string GetModifier(int scoreValue)
	{
		return Project20.Character.CountModifier(scoreValue).ToString();
	}

	private string GetModifier(string scoreValue)
	{
		if (!int.TryParse(scoreValue, out int abilityValue))
		{
			return "X";
		}

		return Project20.Character.CountModifier(abilityValue).ToString();
	}

	private void SaveCharacter()
	{
		DataAccess.SaveCharacter(character);
	}
}
